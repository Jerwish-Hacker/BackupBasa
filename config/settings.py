"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 3.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import environ
env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False)
)
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# reading .env file
environ.Env.read_env(str(BASE_DIR / '.env'))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')

ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=['localhost', '127.0.0.1'])


# Application definition
SHARED_APPS = (
    'django_tenants',  # mandatory
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'widget_tweaks',
    'tenant',
    'django_tenants',
    'grievanceapp',
    'bookingforms',
    'mainapp',
    'staffplanning',
    'covidtestlogin',
    'outreach',
    'cities_light',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'storages',
    'django_celery_beat',
)

TENANT_APPS = (
    'django.contrib.contenttypes',
    'django.contrib.auth',
    'django.contrib.admin',
    'django.contrib.sessions',
    'django.contrib.messages',
    'grievanceapp',
    'bookingforms',
    'mainapp',
    'staffplanning',
    'covidtestlogin',
    'outreach',
    'django_celery_beat',

)
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'widget_tweaks',
    'tenant',
    'grievanceapp',
    'bookingforms',
    'mainapp',
    'staffplanning',
    'covidtestlogin',
    'outreach',
    'cities_light',
    'django_tenants',
    'django_sso',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'storages',
    'django_celery_beat',
]

SITE_ID = 1

MIDDLEWARE = [
    'django_tenants.middleware.main.TenantMainMiddleware',
    'django.middleware.security.SecurityMiddleware',
    # 'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'
PUBLIC_SCHEMA_URLCONF = 'config.urls_public'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES ={
    'default': {
        'ENGINE': 'django_tenants.postgresql_backend',  # Add 'postgresql', 'mysql', 'sqlite3' or 'oracle'.
       'NAME': 'yettihealth',
       'USER': 'azureuser',
       'PASSWORD': 'Eim8nee8osohV0ooPocd',
       'HOST': '',
       'PORT': '5432',   
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'

# STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

STATIC_ROOT = BASE_DIR / 'staticfiles'

APPEND_SLASH = True

MEDIA_ROOT =  BASE_DIR

# MEDIA_URL = '/media/'

# DEFAULT_FILE_STORAGE = 'config.custom_azure.AzureMediaStorage'
# STATICFILES_STORAGE = 'config.custom_azure.AzureStaticStorage'

# STATIC_LOCATION = "static"
# MEDIA_LOCATION = "media"

# AZURE_ACCOUNT_NAME = "djangoaccountstorage"
# AZURE_CUSTOM_DOMAIN = f'basastorageblob.blob.core.windows.net'
# # STATIC_URL = f'https://{AZURE_CUSTOM_DOMAIN}/{STATIC_LOCATION}/'
# MEDIA_URL = f'https://{AZURE_CUSTOM_DOMAIN}/{MEDIA_LOCATION}/'
# MEDIA_ROOT = MEDIA_URL
# LOGIN_REDIRECT_URL = '/'

GOOGLE_RECAPTCHA_SITE_KEY = env('GOOGLE_RECAPTCHA_SITE_KEY')
GOOGLE_RECAPTCHA_SECRET_KEY = env('GOOGLE_RECAPTCHA_SECRET_KEY')

AUTO_LOGOUT_IDLETIME = env('AUTO_LOGOUT_IDLETIME')
AUTO_LOGOUT_POPUPTIMEOUT = env('AUTO_LOGOUT_POPUPTIMEOUT')

CELERY_BROKER_URL = env('CELERY_BROKER_URL')

GRIEVANCE_MSSQLCONNECTION = env('GRIEVANCE_MSSQLCONNECTION')

GRIEVANCE_MSSQLCONNECTION_INCIDENT_REPORT = env('GRIEVANCE_MSSQLCONNECTION_INCIDENT_REPORT')

GRIEVANCE_MSSQLCONNECTION_COMPLIANCE_REPORT=env('GRIEVANCE_MSSQLCONNECTION_COMPLIANCE_REPORT')

UPLOAD_TO_FOLDER = env('UPLOAD_TO_FOLDER')

# https://django-auth-adfs.readthedocs.io/en/latest/azure_ad_config_guide.html

# Needed for the ADFS redirect URI to function

client_id = env('DJANGO_AUTH_ADFS_CLIENT_ID')
cient_secret = env('DJANGO_AUTH_ADFS_CIENT_SECRET')
tenant_id = env('DJANGO_AUTH_ADFS_TENANT_ID')

AUTH_ADFS = {
    'AUDIENCE': 'A',
    'CLIENT_ID': 'B',
    'CLIENT_SECRET': 'C',
    'CLAIM_MAPPING': {'first_name': 'given_name',
                       'last_name': 'family_name',
                    #   'groups': 'groups',
                      'email': 'upn'},
    'GROUPS_CLAIM': None,
    'MIRROR_GROUPS': True,
    'USERNAME_CLAIM': 'upn',
    'TENANT_ID': 'D',
    'RELYING_PARTY_ID': 'E',
    'CUSTOM_FAILED_RESPONSE_VIEW':'mainapp.views.UnautherisedUserAccess',
}
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'django_sso.backend.AdfsAuthCodeBackend',
]
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# LOGIN_URL = "django_auth_adfs:login"


STD_USERS_GROUP_OBJECT_ID = env('STD_USERS_GROUP_OBJECT_ID')
ADM_USERS_GROUP_OBJECT_ID = env('ADM_USERS_GROUP_OBJECT_ID')

#Tenants
DATABASE_ROUTERS = (
    'django_tenants.routers.TenantSyncRouter',
)
TENANT_MODEL = "tenant.Client" # app.Model
TENANT_DOMAIN_MODEL = "tenant.Domain" # app.Model\

#Appointment
DATE_INPUT_FORMATS = [
    '%Y-%m-%d', '%m/%d/%Y', '%m/%d/%y',  # '2006-10-25', '10/25/2006', '10/25/06'
    '%d-%m-%Y', '%d/%m/%Y', '%d/%m/%y',  # '25-10-2006', '25/10/2006', '25/10/06'
    '%b %d %Y', '%b %d, %Y',            # 'Oct 25 2006', 'Oct 25, 2006'
    '%d %b %Y', '%d %b, %Y',            # '25 Oct 2006', '25 Oct, 2006'
    '%B %d %Y', '%B %d, %Y',            # 'October 25 2006', 'October 25, 2006'
    '%d %B %Y', '%d %B, %Y',            # '25 October 2006', '25 October, 2006'
]

CITIES_LIGHT_TRANSLATION_LANGUAGES = ['en']
CITIES_LIGHT_INCLUDE_COUNTRIES = ['US','CA']
CITIES_LIGHT_INCLUDE_CITY_TYPES = ['PPL', 'PPLA', 'PPLA2', 'PPLA3', 'PPLA4', 'PPLC', 'PPLF', 'PPLG', 'PPLL', 'PPLR', 'PPLS', 'STLMT',]

AUTO_LOGOUT_IDLETIME = env('AUTO_LOGOUT_IDLETIME')
AUTO_LOGOUT_POPUPTIMEOUT = env('AUTO_LOGOUT_POPUPTIMEOUT')

LANGUAGE_CODE = 'en-us'
# LANGUAGE_CODE = 'es'
LANGUAGES = (
    ('en-us', ('English')),
    ('es', ('Spanish')),
)
APPEND_SLASH = True

# CELERY_BROKER_URL = env('CELERY_BROKER_URL')

DEFAULT_FROM_EMAIL = 'pixeltechnos@gmail.com'
SERVER_EMAIL = 'pixeltechnos@gmail.com'
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = env('EMAIL_HOST_USER')  
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')


SESSION_EXPIRE_AT_BROWSER_CLOSE = True

PDF_FILE_DOWNLOAD_LOCATION = env('PDF_FILE_DOWNLOAD_LOCATION')


#keycloak
TOKEN_URL = 'http://20.55.232.109:8080/auth/realms/yettihealthcare/protocol/openid-connect/token'
NEWUSER_URL = 'http://20.55.232.109:8080/auth/admin/realms/yettihealthcare/users'
CLIENT_ID = "user-mgmt-sa"
SECRET = "d6bdb766-fb2c-42e9-bd9f-8bc5f7fa6c5e"